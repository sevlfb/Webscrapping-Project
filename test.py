import streamlit as st

st.set_page_config(layout="wide")

filters = {'Dates': [('Dernières 24 heures', 'fromage=1'), ('3 derniers jours', 'fromage=3'), ('7 derniers jours', 'fromage=7'), ('14 derniers jours', 'fromage=14')], 'Publiées par': [('Entreprise (868)', 'sc=0bf%3Aexrec()%3B'), ('Agence de recrutement (66)', 'sc=0bf%3Aexdh()%3B')], 'Télétravail': [('Télétravail partiel (139)', 'sc=0kf%3Aattr(PAXZC)%3B'), ('Télétravail (11)', 'sc=0kf%3Aattr(DSQF7)%3B')], 'Emplacement': [('Lieu exact uniquement', 'radius=0'), ('Dans un rayon de 10 km', 'radius=10'), ('Dans un rayon de 25 km', 'https://fr.indeed.com/Paris-Emplois-Data-Analyst'), ('Dans un rayon de 35 km', 'radius=35'), ('Dans un rayon de 50 km', 'radius=50'), ('Dans un rayon de 75 km', 'radius=75'), ('Dans un rayon de 100 km', 'radius=100')], 'Salaire': [('2 500,00 € et +/mois (639)', 'l=Paris'), ('2 916,67 € et +/mois (544)', 'l=Paris'), ('3 333,33 € et +/mois (420)', 'l=Paris'), ('3 750,00 € et +/mois (310)', 'l=Paris'), ('4 166,67 € et +/mois (192)', 'l=Paris')], 'Type de contrat': [('CDI (399)', 'sc=0kf%3Ajt(permanent)%3B'), ('Temps plein (324)', 'sc=0kf%3Ajt(fulltime)%3B'), ('Stage (148)', 'sc=0kf%3Ajt(internship)%3B'), ('Freelance / Indépendant (29)', 'sc=0kf%3Ajt(subcontract)%3B'), ('Apprentissage (24)', 'sc=0kf%3Ajt(apprenticeship)%3B'), ('Contrat pro (24)', 'sc=0kf%3Ajt(custom_1)%3B'), ('CDD (17)', 'sc=0kf%3Ajt(contract)%3B'), ('Temps partiel (8)', 'sc=0kf%3Ajt(parttime)%3B'), ('Intérim (4)', 'sc=0kf%3Ajt(temporary)%3B')], "Niveau d'études": [('Master (563)', 'sc=0kf%3Aattr(EXSNN)%3B'), ('Niveau Licence (206)', 'sc=0kf%3Aattr(HFDVW)%3B'), ('Niveau Bac +2 (13)', 'sc=0kf%3Aattr(UTPWG)%3B'), ('Master 1 (12)', 'sc=0kf%3Aattr(RNXWH)%3B'), ('Niveau Doctorat (7)', 'sc=0kf%3Aattr(6QC5F)%3B'), ('Niveau Bac (6)', 'sc=0kf%3Aattr(FCGTU)%3B'), ('CAP/BEP (1)', 'sc=0kf%3Aattr(YFQM7)%3B')], 'Secteurs': [('Informatique (152)', 'sc=0kf%3Acmpsec(NKR5F)%3B'), ('Finance (113)', 'sc=0kf%3Acmpsec(MSQWR)%3B'), ('Management et conseil aux entreprises (81)', 'sc=0kf%3Acmpsec(92AZY)%3B'), ('Commerce de détail et de gros (72)', 'sc=0kf%3Acmpsec(48BZP)%3B'), ('Assurance (70)', 'sc=0kf%3Acmpsec(4EWFJ)%3B'), ('Ressources humaines et recrutement (65)', 'sc=0kf%3Acmpsec(Q3FC3)%3B'), ('Médias et communication (53)', 'sc=0kf%3Acmpsec(4DGEF)%3B'), ('Industrie manufacturière (43)', 'sc=0kf%3Acmpsec(CPGHF)%3B'), ('Télécommunications (35)', 'sc=0kf%3Acmpsec(JGU5R)%3B'), ('Transport de biens et de personnes (33)', 'sc=0kf%3Acmpsec(P634J)%3B'), ('Énergie et exploitation des ressources naturelles (32)', 'sc=0kf%3Acmpsec(TAN6J)%3B'), ('Santé (25)', 'sc=0kf%3Acmpsec(22VKN)%3B'), ('Aérospatiale et défense (22)', 'sc=0kf%3Acmpsec(HV5U6)%3B'), ('Services aux particuliers (16)', 'sc=0kf%3Acmpsec(ZYCW4)%3B'), ('Juridique (12)', 'sc=0kf%3Acmpsec(6GW2X)%3B'), ('Pharmaceutique et biotechnologie (11)', 'sc=0kf%3Acmpsec(5ZM33)%3B'), ('Enseignement et formation (8)', 'sc=0kf%3Acmpsec(RFWNN)%3B'), ('Services de construction, réparation et maintenance (7)', 'sc=0kf%3Acmpsec(NTW8X)%3B'), ('Gouvernement et administration publique (6)', 'sc=0kf%3Acmpsec(B23RH)%3B'), ('Agriculture (5)', 'sc=0kf%3Acmpsec(SVBZF)%3B'), ('ONG et associations à but non lucratif (5)', 'sc=0kf%3Acmpsec(ZMM32)%3B'), ('Immobilier (5)', 'sc=0kf%3Acmpsec(S7KHR)%3B'), ('Restauration (4)', 'sc=0kf%3Acmpsec(W2F4E)%3B'), ('Arts, divertissement et loisirs (2)', 'sc=0kf%3Acmpsec(N322U)%3B'), ('Hôtellerie et tourisme (1)', 'sc=0kf%3Acmpsec(X42V4)%3B')], 'Horaires de travail': [('Temps plein (324)', 'sc=0kf%3Aattr(CF3CP)%3B'), ('Du lundi au vendredi (47)', 'sc=0kf%3Aattr(SAP7A)%3B'), ('Travail en journée (38)', 'sc=0kf%3Aattr(PMS5Q)%3B'), ('Période de travail de 8 Heures (11)', 'sc=0kf%3Aattr(5GUGE)%3B'), ('Temps partiel (8)', 'sc=0kf%3Aattr(75GKK)%3B'), ('Repos le week-end (6)', 'sc=0kf%3Aattr(FM8WH)%3B'), ('Heures supplémentaires (4)', 'sc=0kf%3Aattr(5WFZM)%3B'), ('Travail posté (2)', 'sc=0kf%3Aattr(JCVZE)%3B'), ('Travail en soirée (1)', 'sc=0kf%3Aattr(K8AKP)%3B'), ('Disponible le week-end (1)', 'sc=0kf%3Aattr(7SRRR)%3B')], 'Langues demandées': [('Anglais (497)', 'sc=0kf%3Aattr(D866K)%3B'), ('Français (156)', 'sc=0kf%3Aattr(2F7SH)%3B'), ('Allemand (16)', 'sc=0kf%3Aattr(XMED8)%3B'), ('Italien (9)', 'sc=0kf%3Aattr(VV7UW)%3B'), ('Espagnol (7)', 'sc=0kf%3Aattr(44AQZ)%3B'), ('Néerlandais (5)', 'sc=0kf%3Aattr(XS34A)%3B'), ('Langue des signes française (3)', 'sc=0kf%3Aattr(UDCTP)%3B'), ('Portugais (3)', 'sc=0kf%3Aattr(PQAE4)%3B'), ('Chinois (2)', 'sc=0kf%3Aattr(TG4D3)%3B'), ('Arabe (1)', 'sc=0kf%3Aattr(A9EUD)%3B')], 'Lieu': [('Paris (75) (487)', 'jlid=38ec804400892bb8'), ('Nanterre (92) (41)', 'jlid=86829c1c2b118219'), ('Boulogne-Billancourt (92) (38)', 'jlid=e3f8000bf0bdc936'), ('Puteaux (92) (31)', 'jlid=f61bf24884989b94'), ('Issy-les-Moulineaux (92) (31)', 'jlid=36288625d3ea7274'), ('Levallois-Perret (92) (20)', 'jlid=543386da05ca1b68'), ('Neuilly-sur-Seine (92) (19)', 'jlid=807ed371e9c9cf9d'), ('La Défense (92) (19)', 'jlid=1a5247e4ef11cc7b'), ('Courbevoie (92) (16)', 'jlid=8d0370be2c720125'), ('Saint-Denis (93) (16)', 'jlid=460e0ee8315d7b12'), ('Vélizy-Villacoublay (78) (12)', 'jlid=f0eca5f75cc3b428'), ('Guyancourt (78) (11)', 'jlid=8cedaac1b8624eb0'), ('Massy (91) (11)', 'jlid=edc7db105a8460de'), ('Paris 8e (75) (11)', 'jlid=377311ef8e990179'), ('Rueil-Malmaison (92) (10)', 'jlid=adeb099aa7ec4fae')], 'Entreprise': [('Groupe BPCE (22)', 'sc=0kf%3Afcckey(85a05cca9503acec)%3B'), ('Groupama (19)', 'sc=0kf%3Afcckey(3961bc360b1c9aa2)%3B'), ('AXA / France (19)', 'sc=0kf%3Afcckey(2ab2942d00c9d0de)%3B'), ('INGENIANCE (14)', 'sc=0kf%3Afcckey(443662027d5b73da)%3B'), ('Data Recrutement (12)', 'sc=0kf%3Afcckey(f2e72d080a534ef0)%3B'), ('Crédit Agricole (11)', 'sc=0kf%3Afcckey(fd3e5d385effae07)%3B'), ('Meritis (11)', 'sc=0kf%3Afcckey(7aec055de1df5f7c)%3B'), ('C-LOG (11)', 'sc=0kf%3Afcckey(d4a30dbd79d16f44)%3B'), ('Caisse des dépôts (10)', 'sc=0kf%3Afcckey(09948e36d8688550)%3B'), ('Lincoln (10)', 'sc=0kf%3Afcckey(962b9d7f01dcdc07)%3B')]}

ok = st.button("send these bitches")
nb_rows = 4
nb_columns = len(filters)//nb_rows+nb_rows%2
for i in range(nb_rows):
    exec(f"cols{i} = st.columns(nb_columns)")

for filter, values in filters.items():
    temp = [(filter,'')] + values
    seen = set()
    filters[filter] = [x for x in temp if not (x in seen or seen.add(x))]
    filters[filter] = dict(zip([x[0] for x in temp], [x[1] for x in temp]))
    #st.write(filter, filters[filter])
for i, filter in enumerate(filters):
    row = str(i//nb_columns)
    column = str(i%nb_columns)
    col_ = f"cols{row}[{column}]"
    exec(f"""st.session_state["filter_{i}"] = {col_}.selectbox(label="{filter}", options=list((map(lambda x: x.strip(), filters["{filter}"]))), index=0)""")

link = ""
for i, (filter, values) in enumerate(filters.items()):
    #st.write(i, filter, values, st.session_state[f"filter_{i}"])
    data = filters[filter][st.session_state[f"filter_{i}"]]
    link += "" if len(data) == 0 else f"&{data}"
st.write(link)

